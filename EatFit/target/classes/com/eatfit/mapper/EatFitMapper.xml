<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.eatfit.mapper.EatFitMapper">

	<!-- 회원가입 -->
	<insert id="join" parameterType="com.eatfit.entity.Member">
		insert into member_info(MEM_ID, MEM_PW, MEM_NICK, MEM_AGE, MEM_GENDER, MEM_HEIGHT, MEM_WEIGTH, MEM_GOAL, MEM_ACTIVITY, MEM_CALORIE, MEM_CRB, MEM_PROTEIN, MEM_FAT) 
		values (#{MEM_ID}, #{MEM_PW}, #{MEM_NICK}, #{MEM_AGE}, #{MEM_GENDER}, #{MEM_HEIGHT}, #{MEM_WEIGTH}, #{MEM_GOAL}, #{MEM_ACTIVITY}, #{MEM_CALORIE}, #{MEM_CRB}, #{MEM_PROTEIN}, #{MEM_FAT})
	</insert>
	
	<!-- 로그인 -->
	<select id="login" parameterType="com.eatfit.entity.Member" resultType="com.eatfit.entity.Member">
		select * from member_info where mem_id = #{MEM_ID} and mem_pw = #{MEM_PW}
	</select>
	
	<!-- 식자재보관함 정보 가져오기 -->
	<select id="foodMSB" parameterType="com.eatfit.entity.Member" resultType="com.eatfit.entity.Food">
		SELECT A.*
    	  FROM food_info A INNER JOIN member_msb B
    	    ON A.food_seq = B.food_seq
    	 WHERE B.mem_id = #{MEM_ID}
	</select>
	
	
	<!-- 식자재보관함 음식 추가하기 -->
	<!-- 1. 추가하고자하는 음식이름이 포함된 음식의 SEQ값 가져오기 -->
	<!-- select MIN(food_seq) from food_info where food_name in (#{add_food}) -->
	<select id="addFoodSearch" parameterType="java.lang.String" resultType="java.lang.Integer">
		SELECT * FROM (
        	SELECT MIN(food_seq) AS food_seq, food_name
        	FROM food_info
        	WHERE food_group IN (
          		'어류', '패류', '갑각류', '두족류', '해조류',
          		'식육가공품 및 포장육', '두부류 또는 묵류', '곡류 및 그 제품',
          		'감자 및 전분류', '두류', '견과류 및 종실류', '채소류',
          		'버섯류', '과실류', '육류', '난류', '어패류 및 기타 수산물',
          		'우유 및 유제품류', '유지류', '조미료류'
        		)
        	and food_name like(#{add_food}||'%') 
        	GROUP BY food_name
        	ORDER BY food_seq)
		WHERE ROWNUM =1
	</select>
	<!-- 2. 식단보관함에 추가하기 -->
	<insert id="addMSB" parameterType="com.eatfit.entity.MSB">
		insert into member_msb values (#{MEM_ID}, #{FOOD_SEQ})
	</insert>
	
	
	<!-- 식자재보관함 음식 삭제하기 -->
	<delete id="deleteMSB" parameterType="com.eatfit.entity.MSB">
		delete from member_msb where mem_id = #{MEM_ID} and food_seq = #{FOOD_SEQ} 
	</delete>
	
	
	<!-- 식단기록장 정보 가져오기 -->
	<select id="foodDiary" parameterType="java.lang.String" resultType="Integer">
		SELECT TO_NUMBER(SUBSTR(REQ_DATE, 9, 2))
 		  FROM MEMBER_DR 
		 WHERE MEM_ID = #{MEM_ID} AND  SUBSTR(REQ_DATE, 6, 2) = SUBSTR(TO_CHAR(SYSDATE, 'YYYY-MM-DD'), 6, 2)
		 GROUP BY SUBSTR(REQ_DATE, 9, 2)
	</select>
	
	
	<!-- 특정날짜 사용자 식단기록 가져오기 -->
	<select id="searchDiary" parameterType="com.eatfit.entity.Diary" resultType="com.eatfit.entity.SearchDiary">
		SELECT A.FOOD_NAME,SUBSTR(B.REQ_DATE, 12, 5) AS REQ_DATE, B.MLD, B.FOOD_IMG,
      		   TRUNC(A.FOOD_CALORIE*(B.FOOD_WEIGTH/A.FOOD_WEIGTH)) AS FOOD_CALORIE,
      		   TRUNC(A.FOOD_CRB*(B.FOOD_WEIGTH/A.FOOD_WEIGTH)) AS FOOD_CRB,
       		   TRUNC(A.FOOD_PROTEIN*(B.FOOD_WEIGTH/A.FOOD_WEIGTH)) AS FOOD_PROTEIN,
       		   TRUNC(A.FOOD_FAT*(B.FOOD_WEIGTH/A.FOOD_WEIGTH)) AS FOOD_FAT
  		  FROM FOOD_INFO A INNER JOIN (SELECT * FROM MEMBER_DR WHERE MEM_ID = #{MEM_ID} AND REQ_DATE LIKE (#{REQ_DATE}||'%')) B
    	    ON A.FOOD_SEQ = B.FOOD_SEQ
	</select>
	
	<!-- 음식 이름 seq으로 가져오기 -->
	<select id="uploadFoodSearch" parameterType="String" resultType="integer">
		select MIN(food_seq)
		  from food_info
		 where food_name = #{FOOD_NAME}
	</select>
	
	<!-- mem_id, req_date, food_seq, food_weigth, food_img, analogy_food_img -> insert -->
	<insert id="insertUploadData" parameterType="com.eatfit.entity.Upload">
		insert into member_dr (MEM_ID, REQ_DATE, FOOD_SEQ, FOOD_IMG, ANALOGY_FOOD_IMG) 
		values (#{MEM_ID}, TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'), #{FOOD_SEQ}, #{FOOD_IMG}, #{ANALOGY_FOOD_IMG})
	</insert>
	
	<!-- 디폴트 중량 가져오기 -->
	<select id="getFoodWeigth" parameterType="com.eatfit.entity.Member" resultType="com.eatfit.entity.Food">
		SELECT B.FOOD_SEQ, B.FOOD_WEIGTH, B.FOOD_NAME
  		  FROM MEMBER_DR A inner join FOOD_INFO B
    		ON A.FOOD_SEQ = B.FOOD_SEQ
 		 WHERE A.MEM_ID = #{MEM_ID} and A.REQ_DATE LIKE TO_CHAR(SYSDATE, 'YYYY-MM-DD%')
	</select>
	
	<!-- 입력한 중량, MLD 입력하기 -->
	<update id="updateWeigth" parameterType="com.eatfit.entity.Upload">
		UPDATE MEMBER_DR SET MLD = #{MLD}, FOOD_WEIGTH = #{FOOD_WEIGTH}
		WHERE FOOD_SEQ = #{FOOD_SEQ} and MEM_ID = #{MEM_ID} and REQ_DATE LIKE TO_CHAR(SYSDATE, 'YYYY-MM-DD%')
	</update>

	<!-- 사진 분석 정보 불러와 업로드 -->
	<select id="upload" parameterType="String" resultType="com.eatfit.entity.Upload">

		SELECT MIN(REQ_DATE) AS REQ_DATE, MLD, MIN(FOOD_IMG) AS FOOD_IMG, SUM(FOOD_CALORIE) AS FOOD_CALORIE, SUM(FOOD_CRB) AS FOOD_CRB, SUM(FOOD_PROTEIN) AS FOOD_PROTEIN, SUM(FOOD_FAT) AS FOOD_FAT
		  FROM (SELECT A.FOOD_NAME,SUBSTR(B.REQ_DATE, 12, 5) AS REQ_DATE, B.MLD, B.FOOD_IMG,
		       TRUNC(A.FOOD_CALORIE*(B.FOOD_WEIGTH/A.FOOD_WEIGTH)) AS FOOD_CALORIE,
		       TRUNC(A.FOOD_CRB*(B.FOOD_WEIGTH/A.FOOD_WEIGTH)) AS FOOD_CRB,
		       TRUNC(A.FOOD_PROTEIN*(B.FOOD_WEIGTH/A.FOOD_WEIGTH)) AS FOOD_PROTEIN,
		       TRUNC(A.FOOD_FAT*(B.FOOD_WEIGTH/A.FOOD_WEIGTH)) AS FOOD_FAT
		  FROM FOOD_INFO A INNER JOIN (SELECT * FROM MEMBER_DR WHERE MEM_ID = #{MEM_ID} AND REQ_DATE LIKE TO_CHAR(SYSDATE, 'YYYY-MM-DD%')) B
		    ON A.FOOD_SEQ = B.FOOD_SEQ)
		 GROUP BY MLD
	</select>
	
	<!-- 로그인 메인페이지 사용자 대시보드 섭취하고 난 뒤 영양정보 가져오기 -->
	<select id="getNTSum" parameterType="String" resultType="com.eatfit.entity.Upload">
		SELECT TRUNC(SUM(A.FOOD_CALORIE*(B.FOOD_WEIGTH/A.FOOD_WEIGTH))) AS FOOD_CALORIE,
		       TRUNC(SUM(A.FOOD_CRB*(B.FOOD_WEIGTH/A.FOOD_WEIGTH))) AS FOOD_CRB,
		       TRUNC(SUM(A.FOOD_PROTEIN*(B.FOOD_WEIGTH/A.FOOD_WEIGTH))) AS FOOD_PROTEIN,
		       TRUNC(SUM(A.FOOD_FAT*(B.FOOD_WEIGTH/A.FOOD_WEIGTH))) AS FOOD_FAT
	      FROM FOOD_INFO A INNER JOIN (SELECT * FROM MEMBER_DR WHERE MEM_ID = #{MEM_ID} AND REQ_DATE LIKE TO_CHAR(SYSDATE, 'YYYY-MM-DD%')) B
	    	ON A.FOOD_SEQ = B.FOOD_SEQ
	</select>
	
	<select id="getFoodDetailData" parameterType="com.eatfit.entity.Upload" resultType="com.eatfit.entity.Upload">
		SELECT A.FOOD_NAME,SUBSTR(B.REQ_DATE, 12, 5) AS REQ_DATE, B.MLD, B.FOOD_IMG, B.FOOD_WEIGTH,
      		   TRUNC(A.FOOD_CALORIE*(B.FOOD_WEIGTH/A.FOOD_WEIGTH)) AS FOOD_CALORIE,
      		   TRUNC(A.FOOD_CRB*(B.FOOD_WEIGTH/A.FOOD_WEIGTH)) AS FOOD_CRB,
       		   TRUNC(A.FOOD_PROTEIN*(B.FOOD_WEIGTH/A.FOOD_WEIGTH)) AS FOOD_PROTEIN,
       		   TRUNC(A.FOOD_FAT*(B.FOOD_WEIGTH/A.FOOD_WEIGTH)) AS FOOD_FAT
  		  FROM FOOD_INFO A INNER JOIN (SELECT * FROM MEMBER_DR WHERE MEM_ID = #{MEM_ID} AND REQ_DATE LIKE TO_CHAR(SYSDATE, 'YYYY-MM-DD%')) B
    	    ON A.FOOD_SEQ = B.FOOD_SEQ
            WHERE MLD = #{MLD}
	</select>
</mapper>